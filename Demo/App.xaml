<Application
	x:Class="Demo.App"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:vm="clr-namespace:Demo.ViewModel"
	xmlns:controls="clr-namespace:System.Windows.Controls;assembly=MultiSelectTreeView"
	xmlns:sys="clr-namespace:System;assembly=mscorlib"
	xmlns:demo="clr-namespace:Demo"
	StartupUri="MainWindow.xaml">
	
	<Application.Resources>
		<Style x:Key="Caption">
			<Setter Property="TextBlock.FontWeight" Value="Light"/>
			<Setter Property="TextBlock.FontSize" Value="21"/>
			<Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
			<Setter Property="FrameworkElement.Margin" Value="0,12,0,6"/>
		</Style>
		<Style x:Key="FirstCaption" BasedOn="{StaticResource Caption}">
			<Setter Property="FrameworkElement.Margin" Value="0,0,0,6"/>
		</Style>
        <!--
		Here the normal editor template is defined
		-->
        <DataTemplate x:Key="EditTemplate" DataType="{x:Type vm:TreeItemViewModel}">
            <StackPanel Orientation="Horizontal">
                <Border Background="YellowGreen" CornerRadius="3" Width="16" Height="16"/>
                <controls:EditTextBox
                    Text="{Binding DisplayName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    Padding="2,0,0,0"/>
            </StackPanel>
        </DataTemplate>
        <!--
		This is a specialized editor template for ColorItemViewModel items
		-->
        <ObjectDataProvider x:Key="colorsTypeOdp" ObjectType="{x:Type sys:Type}" MethodName="GetType">
            <ObjectDataProvider.MethodParameters>
                <sys:String>System.Windows.Media.Colors, PresentationCore, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</sys:String>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="colorPropertiesOdp" ObjectInstance="{StaticResource colorsTypeOdp}" MethodName="GetProperties"/>
        <DataTemplate x:Key="ColorEditTemplate" DataType="{x:Type vm:ColorItemViewModel}">
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="Colour:" VerticalAlignment="Center"/>
                <ComboBox
                    Width="170" Margin="6,0,0,0"
                    ItemsSource="{Binding Source={StaticResource colorPropertiesOdp}}"
                    SelectedValue="{Binding Color}"
                    SelectedValuePath="Name">
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <Rectangle Margin="0,1,4,1" Width="15" Fill="{Binding Name}"/>
                                <TextBlock Text="{Binding Name}"/>
                            </StackPanel>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>
            </StackPanel>
        </DataTemplate>
        <!--
		The following selector selects a DataTemplate based on the type of an item. It is only
		required when using multiple different editor templates. If you do not use editing
		functionality of items at all or only need a single editor template, you can omit these
		template definitions and the selector and just define the template further down where it
		is noted.
		-->
        <demo:TypeTemplateSelector x:Key="EditorTemplateSelector">
            <demo:TypeTemplateSelector.TemplateDefinitions>
                <!--
				Following are all view model types that use a special editor template. Be sure to
				specify the most specialised type first, as base types will also be considered.
				-->
                <demo:TypeTemplateDefinition
                    Type="{x:Type vm:ColorItemViewModel}" Template="{StaticResource ColorEditTemplate}"/>
                <demo:TypeTemplateDefinition
                    Type="{x:Type vm:TreeItemViewModel}" Template="{StaticResource EditTemplate}"/>
            </demo:TypeTemplateSelector.TemplateDefinitions>
        </demo:TypeTemplateSelector>
        <BooleanToVisibilityConverter x:Key="BoolToVisibility"/>

        <!--
        Here the general item appearance is defined, for the ViewModel.TreeItemViewModel type
        -->
        <HierarchicalDataTemplate 
            x:Key="TreeItemViewModelHierarchicalDataTemplate" 
            DataType="{x:Type vm:TreeItemViewModel}" 
            ItemsSource="{Binding Children}">
            <StackPanel Orientation="Horizontal">
                <Border Background="Orange" CornerRadius="3" Width="16" Height="16" SnapsToDevicePixels="True"/>
                <TextBlock Text="{Binding DisplayName}" Padding="4,0,2,0"/>
            </StackPanel>
        </HierarchicalDataTemplate>

        <!--
        This is another item appearance for the ViewModel.ColorItemViewModel type
        -->
        <HierarchicalDataTemplate 
            x:Key="ColorItemViewModelHierarchicalDataTemplate" 
            DataType="{x:Type vm:ColorItemViewModel}" 
            ItemsSource="{Binding Children}">
            <TextBlock
                Text="{Binding DisplayName}"
                Background="{Binding BackgroundBrush}"
                Foreground="{Binding ForegroundBrush}"
                Padding="4,0,2,0"/>
        </HierarchicalDataTemplate>

        <Style x:Key="MultiSelectTreeViewItemStyle" TargetType="{x:Type controls:MultiSelectTreeViewItem}">
            <!--
			Here the TreeViewItem's properties are connected with the ViewModel class.
			Basically you would make all MultiSelectTreeViewItem properties accessible
			in the view model class that you possibly want to get or set in order to
			determine or manipulate the view from the view model class.
			-->
            <Setter Property="DisplayName" Value="{Binding DisplayName, Mode=TwoWay}"/>
            <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
            <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
            <Setter Property="IsEnabled" Value="{Binding IsEnabled, Mode=TwoWay}"/>
            <Setter Property="IsVisible" Value="{Binding IsVisible, Mode=TwoWay}"/>
            <Setter Property="IsEditable" Value="{Binding IsEditable, Mode=TwoWay}"/>
            <!-- Don't bind IsEditing because this would lead to two TreeViews editing the item... -->
        </Style>
    </Application.Resources>
</Application>
